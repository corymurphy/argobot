// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1ApplicationSourceKustomize ApplicationSourceKustomize holds options specific to an Application source specific to Kustomize
//
// swagger:model v1alpha1ApplicationSourceKustomize
type V1alpha1ApplicationSourceKustomize struct {

	// CommonAnnotations is a list of additional annotations to add to rendered manifests
	CommonAnnotations map[string]string `json:"commonAnnotations,omitempty"`

	// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
	CommonAnnotationsEnvsubst bool `json:"commonAnnotationsEnvsubst,omitempty"`

	// CommonLabels is a list of additional labels to add to rendered manifests
	CommonLabels map[string]string `json:"commonLabels,omitempty"`

	// Components specifies a list of kustomize components to add to the kustomization before building
	Components []string `json:"components"`

	// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
	ForceCommonAnnotations bool `json:"forceCommonAnnotations,omitempty"`

	// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
	ForceCommonLabels bool `json:"forceCommonLabels,omitempty"`

	// Images is a list of Kustomize image override specifications
	Images []string `json:"images"`

	// LabelWithoutSelector specifies whether to apply common labels to resource selectors or not
	LabelWithoutSelector bool `json:"labelWithoutSelector,omitempty"`

	// NamePrefix is a prefix appended to resources for Kustomize apps
	NamePrefix string `json:"namePrefix,omitempty"`

	// NameSuffix is a suffix appended to resources for Kustomize apps
	NameSuffix string `json:"nameSuffix,omitempty"`

	// Namespace sets the namespace that Kustomize adds to all resources
	Namespace string `json:"namespace,omitempty"`

	// Patches is a list of Kustomize patches
	Patches []*V1alpha1KustomizePatch `json:"patches"`

	// Replicas is a list of Kustomize Replicas override specifications
	Replicas []*V1alpha1KustomizeReplica `json:"replicas"`

	// Version controls which version of Kustomize to use for rendering manifests
	Version string `json:"version,omitempty"`
}

// Validate validates this v1alpha1 application source kustomize
func (m *V1alpha1ApplicationSourceKustomize) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePatches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicas(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ApplicationSourceKustomize) validatePatches(formats strfmt.Registry) error {
	if swag.IsZero(m.Patches) { // not required
		return nil
	}

	for i := 0; i < len(m.Patches); i++ {
		if swag.IsZero(m.Patches[i]) { // not required
			continue
		}

		if m.Patches[i] != nil {
			if err := m.Patches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("patches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1ApplicationSourceKustomize) validateReplicas(formats strfmt.Registry) error {
	if swag.IsZero(m.Replicas) { // not required
		return nil
	}

	for i := 0; i < len(m.Replicas); i++ {
		if swag.IsZero(m.Replicas[i]) { // not required
			continue
		}

		if m.Replicas[i] != nil {
			if err := m.Replicas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1alpha1 application source kustomize based on the context it is used
func (m *V1alpha1ApplicationSourceKustomize) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePatches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ApplicationSourceKustomize) contextValidatePatches(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Patches); i++ {

		if m.Patches[i] != nil {

			if swag.IsZero(m.Patches[i]) { // not required
				return nil
			}

			if err := m.Patches[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patches" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("patches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1ApplicationSourceKustomize) contextValidateReplicas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Replicas); i++ {

		if m.Replicas[i] != nil {

			if swag.IsZero(m.Replicas[i]) { // not required
				return nil
			}

			if err := m.Replicas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1ApplicationSourceKustomize) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1ApplicationSourceKustomize) UnmarshalBinary(b []byte) error {
	var res V1alpha1ApplicationSourceKustomize
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
