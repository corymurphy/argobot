// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1PluginGenerator PluginGenerator defines connection info specific to Plugin.
//
// swagger:model v1alpha1PluginGenerator
type V1alpha1PluginGenerator struct {

	// config map ref
	ConfigMapRef *V1alpha1PluginConfigMapRef `json:"configMapRef,omitempty"`

	// input
	Input *V1alpha1PluginInput `json:"input,omitempty"`

	// RequeueAfterSeconds determines how long the ApplicationSet controller will wait before reconciling the ApplicationSet again.
	RequeueAfterSeconds int64 `json:"requeueAfterSeconds,omitempty"`

	// template
	Template *V1alpha1ApplicationSetTemplate `json:"template,omitempty"`

	// Values contains key/value pairs which are passed directly as parameters to the template. These values will not be
	// sent as parameters to the plugin.
	Values map[string]string `json:"values,omitempty"`
}

// Validate validates this v1alpha1 plugin generator
func (m *V1alpha1PluginGenerator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigMapRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1PluginGenerator) validateConfigMapRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigMapRef) { // not required
		return nil
	}

	if m.ConfigMapRef != nil {
		if err := m.ConfigMapRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configMapRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configMapRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1PluginGenerator) validateInput(formats strfmt.Registry) error {
	if swag.IsZero(m.Input) { // not required
		return nil
	}

	if m.Input != nil {
		if err := m.Input.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1PluginGenerator) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha1 plugin generator based on the context it is used
func (m *V1alpha1PluginGenerator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigMapRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1PluginGenerator) contextValidateConfigMapRef(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigMapRef != nil {

		if swag.IsZero(m.ConfigMapRef) { // not required
			return nil
		}

		if err := m.ConfigMapRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configMapRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configMapRef")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1PluginGenerator) contextValidateInput(ctx context.Context, formats strfmt.Registry) error {

	if m.Input != nil {

		if swag.IsZero(m.Input) { // not required
			return nil
		}

		if err := m.Input.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1PluginGenerator) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.Template != nil {

		if swag.IsZero(m.Template) { // not required
			return nil
		}

		if err := m.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1PluginGenerator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1PluginGenerator) UnmarshalBinary(b []byte) error {
	var res V1alpha1PluginGenerator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
